crownClothing ===FetchData>Firebase
initally web send a request to google sever and it verfies and send a auth_token that auth token is send to the fire base then the fires base to verify that auth tken so it get connection ith the google server once it get confirmed googel server will send verify token Firebase will send the access token that verify token will aloow web to authenticate and then do crud operations based on the authoriZation level i need to send the crud opertaion along with the access token and perform certain request.

About context -----------------------------------------------------------------
UserProvider: This component manages the state related to user data and provides it to its child components using the UserContext.Provider. It controls how the data is initialized, updated, and made available to the rest of the application.

UserContext: This is the context object that defines what data is available and how to access it. It's typically exported to allow other components to use it.


Differnce between context api and redux
Context API is a new way to pass data through the component tree without having to use props drilling. Itâ€™s used for passing down global values
while on the other hand redux is a way of maanging the states in global way that even the child element has the access to state form the parenet element component states

  <BrowserRouter>
      <UserProvider>
        <CategoriesProvider>
          <CartProvider>
            <App />
          </CartProvider>
        </CategoriesProvider>
      </UserProvider>
    </BrowserRouter>
    here app has all the satate acess like user,cart and catgeory in the other hand any component which is outsode the context will not have acess to that so solving that issues we are going redux.

    Data flow:


Redux thunk:
const incrementCounterAsync = (value) => {
  return (dispatch, getState) => {
    setTimeout(() => {
      dispatch(incrementCounter(value));
    }, 1000);
  };
};

In the above example, the incrementCounterAsync action creator does not return an action object directly. Instead, it returns a function that accepts dispatch so it can dispatch an action after a timeout.
How It Works

When you use Redux Thunk, an action creator returns a function, Redux Thunk middleware intercepts it. If an action creator returns an action (plain object), it forwards the action to the reducers. If it returns a function, Redux Thunk calls this function with dispatch and getState arguments. You can then execute any asynchronous code and dispatch actions when the asynchronous operations are done.


Redux: https://chat.openai.com/share/f2740a88-0711-41d1-b231-d1e1ddf91dfa  -- follow this link for saga understanding
redux is a side effect management libraray used in react for managing all side effects based functions 
main things in saga
call: Call a function. If it returns a Promise, it will pause the saga until the Promise is resolved.